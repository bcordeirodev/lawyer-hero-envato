# Cursor AI Rules for LawyerHero Project

## 📚 Documentation Organization Rules

### **File Structure**

- **Root Level**: Keep only essential files (README.md, package.json, config files)
- **Documentation**: All .md files should go in the `docs/` folder
- **Organization**: Use clear, descriptive filenames with consistent naming conventions

### **Documentation Standards**

#### **File Naming Convention**

- Use UPPERCASE for main documentation files
- Use descriptive names that indicate content
- Examples: `CUSTOMIZATION.md`, `DEPLOYMENT.md`, `API_REFERENCE.md`

#### **Content Organization**

- Start with a clear title and overview
- Use consistent emoji icons for sections
- Include table of contents for files > 100 lines
- End with a conclusion and next steps

#### **Documentation Categories**

1. **User Guides** (CUSTOMIZATION.md, DEPLOYMENT.md)
2. **Technical Docs** (TEMPLATE_GUIDE.md, API_REFERENCE.md)
3. **Integration Guides** (TEMPLATE_EMAILJS.md, STRIPE_INTEGRATION.md)
4. **Distribution** (ENVATO_SUBMISSION_CHECKLIST.md)
5. **Maintenance** (UPDATE_INSTRUCTIONS.md, CHANGELOG.md)

### **When Creating New Documentation**

#### **✅ DO:**

- Place all .md files in the `docs/` folder
- Update `docs/README.md` index when adding new files
- Use consistent formatting and structure
- Include practical examples and code snippets
- Add to appropriate category in the index

#### **❌ DON'T:**

- Create .md files in the root directory
- Use inconsistent naming conventions
- Forget to update the documentation index
- Create documentation without clear purpose

### **Documentation Template Structure**

```markdown
# 📋 [Title] - LawyerHero Template

## 🎯 **VISÃO GERAL**

Brief description of what this document covers

## 📖 **CONTEÚDO**

Main sections with clear headings

## 🔧 **IMPLEMENTAÇÃO**

Code examples and practical steps

## 📱 **EXEMPLOS**

Real-world usage examples

## 🆘 **TROUBLESHOOTING**

Common issues and solutions

## 🚀 **PRÓXIMOS PASSOS**

What to do next

**🚀 Boa sorte com [specific topic]!**
```

### **Index Maintenance**

- Always update `docs/README.md` when adding new documentation
- Categorize new files appropriately
- Update the file count and structure
- Maintain consistent linking patterns

### **Quality Standards**

- **Clarity**: Easy to understand for target audience
- **Completeness**: Cover all necessary information
- **Consistency**: Same style and format across all docs
- **Practicality**: Include real examples and use cases
- **Maintenance**: Keep documentation up-to-date

### **File Management**

- **New Documentation**: Always goes in `docs/` folder
- **Updates**: Modify existing files in place
- **Archiving**: Move outdated docs to `docs/archive/` if needed
- **Versioning**: Use semantic versioning for major changes

### **Integration with Project**

- Reference relevant code files and components
- Include configuration examples
- Link to external resources when appropriate
- Maintain consistency with project structure

---

## 🎯 **Summary**

- **All .md files → `docs/` folder**
- **Update index when adding new docs**
- **Use consistent naming and formatting**
- **Maintain quality and completeness**
- **Follow established templates and patterns**

This ensures the project remains organized and professional while providing comprehensive documentation for users and developers.
